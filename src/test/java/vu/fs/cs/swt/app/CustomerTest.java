package vu.fs.cs.swt.app;

import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;

import vu.fs.cs.swt.beans.Customer;
import vu.fs.cs.swt.beans.Loan;

public class CustomerTest {
	
	private Customer customer;
	
	
//test : Customer has an account number, generated by the system
	@Test
	public void testSetCustomer() {
		try {
			customer = new Customer("John", "Doe", "johnny", "awesomePassword");
			
			assertNotNull("account number should not be null",customer.getAccountNumber());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
//test: A customer has one savings account (at all times, even if it is empty)
	@Test
	public void testSavingsAccount(){
		
		try {
			customer = new Customer("John", "Doe", "johnny", "awesomePassword");
			
			assertNotNull("savings account should have been created",customer.getSavingsAccount().getId());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
//test A customer has one savings account (at all times, even if it is empty) - test if it exists even if it is empty
	@Test
	public void testSavingsAccountEmpty(){
		
		try {
			
			customer = new Customer("John", "Doe", "johnny", "awesomePassword");
			
			assertEquals("balance in account should be 0", customer.getSavingsAccount().getBalance(), 0.0, 0.0);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

//A customer may have up to 3 loans at a time
	@Test
	public void testNumberOfLoans(){
		try {
			customer = new Customer("John", "Doe", "johnny", "awesomePassword");
			
			Loan l = new Loan();
			
			customer.addLoan(l);
			customer.addLoan(l);
			customer.addLoan(l);
			customer.addLoan(l);
			
			Assert.fail("customer can only have 3 loans");
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
//Check if no exception is thrown for fewer loans
	
	@Test
	public void testMaxNumberOfLoans(){
		try {
			customer = new Customer("John", "Doe", "johnny", "awesomePassword");
			
			Loan l = new Loan();
			
			customer.addLoan(l);
			customer.addLoan(l);
			customer.addLoan(l);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testGetCustomer() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetId() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetId() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetFirstName() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetFirstName() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetLastName() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetLastName() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetUsername() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetUsername() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetPassword() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetPassword() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetAccountNumber() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetBeginningBalance() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetBeginningBalance() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetEndBalance() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetEndBalance() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetSavingsAccount() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetLoans() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetLoans() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetInitiateLoan() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetInitiateLoan() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetPaymentLoan() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetPaymentLoan() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetDepositSavings() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetDepositSavings() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetWithdrawSavings() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetWithdrawSavings() {
		fail("Not yet implemented");
	}

	@Test
	public void testCorrectPassword() {
		fail("Not yet implemented");
	}

	@Test
	public void testAddLoan() {
		fail("Not yet implemented");
	}

}
